name: deploy-py-lambda
on:
  workflow_dispatch:
    inputs:
      python-version:
        description: choose python version you'd like to use
        type: choice
        default: '3.12'
        options:
          - '3.12'
      deploy-env:
        description: choose target deploy environment
        type: choice
        default: stage
        options:
          - 'stage'
          - 'prod'

permissions:
  id-token: write
  contents: read

env:
  lambda_name: jihasil-image-handler
  artifact_name: src
  python: python${{ inputs.python-version }}

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.deploy-env }}

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            src

      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: src
          name: ${{ env.artifact_name }}

  deploy-lambda:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ inputs.deploy-env }}
    steps:
      - name: Configure AWS Credentials@v4
        uses: aws-actions/configure-aws-credentials@v3
        with:
          audience: 'sts.amazonaws.com'
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}

      - name: download artifact
        uses: actions/download-artifact@v4

      - name: make lambda
        run: |
          zip -r ${{ env.lambda_name }}.zip ${{ env.artifact_name }}

      - name: deploy lambda
        run: |
          aws lambda update-function-code --function-name ${{ env.lambda_name }} --zip-file fileb://${{ env.lambda_name }}.zip

  deploy-layer:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ inputs.deploy-env }}
    steps:
      - name: Configure AWS Credentials@v4
        uses: aws-actions/configure-aws-credentials@v3
        with:
          audience: 'sts.amazonaws.com'
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}

      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: download artifact
        uses: actions/download-artifact@v4

      - name: make layer
        run: |
          pip install -r ${{ env.artifact_name }}/requirements.txt --target=python 
          zip ${{ env.lambda_name }}-layer.zip -r python 

      - name: deploy layer
        run: |
          aws lambda publish-layer-version \
          --layer-name ${{ env.lambda_name }} \
          --zip-file fileb://${{ env.lambda_name }}-layer.zip \
          --compatible-runtimes ${{ env.python }} \
          --region ${{ vars.AWS_REGION }}

  apply-layer:
    needs: [ deploy-lambda, deploy-layer ]
    environment: ${{ inputs.deploy-env }}
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials@v4
        uses: aws-actions/configure-aws-credentials@v3
        with:
          audience: 'sts.amazonaws.com'
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}

      - name: Get the latest layer version
        id: get_layer_version
        run: |
          LAYER_NAME=${{ env.lambda_name }}
          LAYER_ARN=$(aws lambda list-layer-versions --layer-name $LAYER_NAME --query "LayerVersions[0].LayerVersionArn" --output text)
          echo "Layer ARN: $LAYER_ARN"
          echo "layer_arn=$LAYER_ARN" >> $GITHUB_ENV

      - name: Update Lambda function with the latest layer
        run: |
          FUNCTION_NAME=${{ env.lambda_name }}
          aws lambda update-function-configuration \
            --function-name $FUNCTION_NAME \
            --layers ${{ env.layer_arn }}
